/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    cdnaseq-nf Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input_samplesheet              = null
    output_dir                     = './results'
    
    // Reference genome options
    ref_dir                        = null
    genome_build                   = 'hg38'
    gencode_version                = 45
    
    // Adapter trimming
    adapter_fasta                  = "${baseDir}/assets/adapters.fa"
    
    // Alignment strategy options
    perform_mut_ref_alignment      = true
    skip_p1_mut_if_no_vcf          = true
    
    // Target regions (BED files for variant calling)
    target_bed_tsc                 = null
    target_bed_er02                = null
    
    // STAR parameters
    sjdb_overhang                  = 149
    star_two_pass_mode             = 'Basic'
    skip_star_second_pass          = false
    
    // STAR indexing RAM control parameters (for in-workflow indexing)
    star_index_limit_genome_generate_ram = null // e.g., 30000000000 for 30GB
    star_index_genome_sa_sparse_d       = null // e.g., 2 or 3 for reduced RAM
    star_index_genome_chr_bin_nbits     = null // e.g., 15 or 16 for human genome
    
    // Skip options
    skip_fastqc                    = false
    skip_trimming                  = false
    skip_quantification            = false
    skip_splicing_analysis         = false
    skip_variant_calling           = false
    
    // MultiQC options
    multiqc_config                 = null
    multiqc_title                  = null
    
    // Process resource options
    max_memory                     = '128.GB'
    max_cpus                       = 16
    max_time                       = '240.h'
    
    // Boilerplate options
    help                           = false
    version                        = false
    validate_params                = true
    show_hidden_params             = false
    schema_ignore_params           = 'genomes'
    
    // Config options
    config_profile_name            = null
    config_profile_description     = null
    custom_config_version          = 'master'
    custom_config_base             = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    
    // Publishing options
    publish_dir_mode               = 'copy'
    
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                     = '128.GB'
    max_cpus                       = 16
    max_time                       = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/conda.config'
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/conda.config'
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        process.container      = 'nfcore/base:2.1'
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/docker.config'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        process.container      = 'docker://nfcore/base:2.1'
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/singularity.config'
    }
    slurm {
        includeConfig 'conf/slurm.config'
    }
    test {
        includeConfig 'conf/test.config'
    }
    minimal_alignment {
        includeConfig 'conf/minimal_alignment.config'
    }
}

// Enable reporting
timeline {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/execution_timeline.html"
}
report {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/execution_report.html"
}
trace {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/execution_trace.txt"
}
dag {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/pipeline_dag.svg"
}

manifest {
    name            = 'cdnaseq-nf'
    author          = 'Bernt Popp'
    homePage        = 'https://github.com/berntpopp/cdnaseq-nf'
    description     = 'RNA sequencing analysis pipeline for splicing aberrations with double alignment strategy'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
